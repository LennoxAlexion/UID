package aaap.uid_project.Activities;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;

import org.json.JSONException;
import org.json.JSONObject;

import com.android.volley.Request.Method;
import com.android.volley.Response;
import com.android.volley.VolleyError;
import com.android.volley.toolbox.StringRequest;

import DAOs.GetRoles;
import DTOs.Roles;
import Utils.AppRequestController;
import Utils.SessionManager;
import aaap.uid_project.R;
import android.app.Activity;
import android.content.Intent;
import android.os.Bundle;
import android.util.Log;
import android.view.View;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemSelectedListener;
import android.widget.ArrayAdapter;
import android.widget.Button;
import android.widget.EditText;
import android.widget.Spinner;
import android.widget.Toast;

public class LoginActivity extends Activity {

	private Button LoginB;
	private EditText UserNameET;
	private EditText PasswordET;
	private Spinner DropDownSpinner;
	private SessionManager session;

	private String ROLE;
	public static String URL_LOGIN;

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_login);

		LoginB = (Button) findViewById(R.id.Button_Login);
		UserNameET = (EditText) findViewById(R.id.ET_Username);
		PasswordET = (EditText) findViewById(R.id.ET_Password);
		DropDownSpinner = (Spinner) findViewById(R.id.DropDown_Roles);

		session = new SessionManager(getApplicationContext());
		
		// Check if user is already logged in or not
        if (session.isLoggedIn()) {
            // User is already logged in. Take him to main activity
            
            finish();
        }
        
     // Login button Click Event
        LoginB.setOnClickListener(new View.OnClickListener() {
 
            public void onClick(View view) {
                String email = UserNameET.getText().toString();
                String password = PasswordET.getText().toString();
 
                // Check for empty data in the form
                if (email.trim().length() > 0 && password.trim().length() > 0) {
                    // login user
                    checkLogin(email, password,ROLE);
                } else {
                    // Prompt user to enter credentials
                    Toast.makeText(getApplicationContext(),
                            "Please enter the credentials!", Toast.LENGTH_LONG)
                            .show();
                }
            }
 
        });
		
		
		GetRoles a = new GetRoles(LoginActivity.this, DropDownSpinner);
		a.execute();

		try {
			DropDownSpinner
					.setOnItemSelectedListener(new OnItemSelectedListener() {

						@Override
						public void onItemSelected(AdapterView<?> parent,
								View view, int position, long id) {
							// TODO Auto-generated method stub
							ROLE = Roles.getRoles().get(position);
							Log.i("ROLE : ", ROLE);

						}

						@Override
						public void onNothingSelected(AdapterView<?> parent) {
							// TODO Auto-generated method stub
							Toast.makeText(LoginActivity.this,
									"Your Selected : Nothing",
									Toast.LENGTH_SHORT).show();
						}
					});
		} catch (NullPointerException e) {
			e.printStackTrace();
		}
	}
	
	
	
	private void checkLogin(final String username, final String password, final String role) {
        // Tag used to cancel the request
        String tag_string_req = "req_login";
 
        	
 
        StringRequest strReq = new StringRequest(Method.POST,
                URL_LOGIN, new Response.Listener<String>() {
 
                    @Override
                    public void onResponse(String response) {
                        Log.d("TAG", "Login Response: " + response.toString());
                        
 
                        try {
                            JSONObject jObj = new JSONObject(response);
                            boolean error = jObj.getBoolean("error");
 
                            // Check for error node in json
                            if (!error) {
                                // user successfully logged in
                                // Create login session
                                session.setLogin(true);
                                Toast.makeText(getApplicationContext(), "Logged in scuccesully", Toast.LENGTH_LONG);
                                // Launch main activity
                               // Intent intent = new Intent(LoginActivity.this,
                               //       MainActivity.class);
                               // startActivity(intent);
                               // finish();
                            } else {
                                // Error in login. Get the error message
                                String errorMsg = jObj.getString("error_msg");
                                Toast.makeText(getApplicationContext(),
                                        errorMsg, Toast.LENGTH_LONG).show();
                            }
                        } catch (JSONException e) {
                            // JSON error
                            e.printStackTrace();
                        }
 
                    }
                }, new Response.ErrorListener() {
 
                    @Override
                    public void onErrorResponse(VolleyError error) {
                        Log.e("TAG", "Login Error: " + error.getMessage());
                        Toast.makeText(getApplicationContext(),
                                error.getMessage(), Toast.LENGTH_LONG).show();
                    }
                }) {
 
            @Override
            protected Map<String, String> getParams() {
                // Posting parameters to login url
                Map<String, String> params = new HashMap<String, String>();
                params.put("tag", "login");
                params.put("username", username);
                params.put("password", password);
                params.put("role", role);
                
 
                return params;
            }
 
        };
 
        // Adding request to request queue
        AppRequestController.getInstance().addToRequestQueue(strReq, tag_string_req);
    }

	/*
	 * @Override public boolean onCreateOptionsMenu(Menu menu) { // Inflate the
	 * menu; this adds items to the action bar if it is present.
	 * getMenuInflater().inflate(R.menu.login, menu); return true; }
	 */
	/*
	 * @Override public boolean onOptionsItemSelected(MenuItem item) { // Handle
	 * action bar item clicks here. The action bar will // automatically handle
	 * clicks on the Home/Up button, so long // as you specify a parent activity
	 * in AndroidManifest.xml. int id = item.getItemId(); if (id ==
	 * R.id.action_settings) { return true; } return
	 * super.onOptionsItemSelected(item); }
	 */

}
